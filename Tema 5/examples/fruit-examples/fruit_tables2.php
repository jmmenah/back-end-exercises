<?php
/**
 * Example to display HTML tables getting data for cells from MysQL fruits.fruit table
 *
 * HTML Tables are displayed in vertical and horizontal format
 * Notice the html code generated to make it human readable ;-)
 *
 * In fruit_tables1.php was done with blank spaces and \n
 * Now the Tidy class will be used http://www.php.net/manual/en/class.tidy.php
 * Compare both html codes generated by php
 *
 * IES Virgen del Carmen de Jaén
 * Desarrollo Web en Entorno Servidor 2º DAW
 * Rafael García Cabrera
 *
 * References:
 * see insert_table_fruit_from_xml.php
 *
 * Prepared statements
 * http://www.php.net/manual/en/pdo.prepared-statements.php
 * PDO::prepare — Prepares a statement for execution and returns a statement object
 * http://php.net/manual/en/pdo.prepare.php
 * PDOStatement::execute —  Executes a prepared statement
 * http://php.net/manual/en/pdostatement.execute.php
 * PDOStatement::fetchAll — Returns an array containing all of the result set rows
 * http://www.php.net/manual/en/pdostatement.fetchall.php
 * PDOStatement::fetch — Fetches the next row from a result set
 * http://www.php.net/manual/en/pdostatement.fetch.php
 *
 * TIDY CLASS
 * http://www.php.net/manual/eN/class.tidy.php
 * HTML Tidy Configuration Options
 * http://tidy.sourceforge.net/docs/quickref.html
 *
 * Output Buffering Control
 * http://www.php.net/manual/en/book.outcontrol.php
 * ob_start — Turn on output buffering
 * http://php.net/manual/en/function.ob-start.php
 * ob_end_flush — Flush (send) the output buffer and turn off output buffering
 * http://www.php.net/manual/en/function.ob-end-flush.php
 *
 */

// http://stackoverflow.com/questions/3585790/tidying-php-and-html-code
function callback($buffer)
{
    // Clean up
    $config = array(
        'indent' => true,
        'output-xhtml' => false,
        'wrap' => 200);

    return tidy_repair_string($buffer, $config, 'utf8');
}

ob_start("callback");  // Turn on output buffering

require_once "fruits_functions.php";

pageTop("HTML tables getting data for cells from MysQL fruits.fruit table - 2");

$db = fruitsConnect();

echo "<h2>fruits.fruit table in Vertical format:</h2>";

// HTML table in Vertical format using the heredoc syntax
// http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc
echo <<<TABLE
<table>
  <tr>
    <th>fruit</th>
    <th>color</th>
    <th>id</th>
  </tr>
TABLE;

$query = "SELECT * FROM fruits.fruit";
$stmt = $db->prepare($query);
$stmt->execute();

// Loop through the rows returned in the previously executed statement and create the table rows
// while loop is used http://www.php.net/manual/en/control-structures.while.php
// It could also be done as shown in the horizontal table below with foreach loop

while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    echo "<tr><td>" . $row["name"] . "</td>";
    echo "<td style='color:" . $row['color'] . "; padding: 10px;'>" . $row['color'] . "</td>";
    echo "<td style='padding: 10px;'>" . $row['id'] . "</td></tr>";

}

// closing vertical table
echo "</table>";

echo "<h2>fruits.fruit table in Horizontal format:</h2>";

//  HTML table in Horizontal format
echo "<table style='text-align:center;'>";

// html table rows
$row_fruit = "<tr><th>fruit</th>";
$row_color = "<tr><th>color</th>";
$row_id = "<tr><th>id</th>";

// Execute the previously prepared sentence again.
// Note that the above loop ended because all the rows returned by the prepared query had been traversed
$stmt->execute();

// Loop through the rows returned in the statement just executed and create the table cells
// foreach loop is used http://www.php.net/manual/en/control-structures.foreach.php
// It could also be done as shown in vertical table above with while loop

foreach ($stmt->fetchAll() as $row) {
    $row_fruit .= "<td>" . $row['name'] . "</td>";
    $row_color .= "<td style='color:" . $row['color'] . ";'>" . $row['color'] . "</td>";
    $row_id .= "<td>" . $row['id'] . "</td>";
}
// end html table rows (close tr)
echo $row_fruit . "</tr>";
echo $row_color . "</tr>";
echo $row_id . "</tr>";

// closing horizontal table
echo "</table>\n";

pageBottom();

ob_end_flush();  // Flush (send) the output buffer and turn off output buffering